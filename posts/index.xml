<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Juan Maria Nieves Gomez</title>
        <link>https://juanmarianieves.com/posts/</link>
        <description>Recent content in Posts on Juan Maria Nieves Gomez</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 22 May 2022 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://juanmarianieves.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Enlaces interesantes #1</title>
            <link>https://juanmarianieves.com/posts/2022/05/enlaces-interesantes-#1/</link>
            <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
            
            <guid>https://juanmarianieves.com/posts/2022/05/enlaces-interesantes-#1/</guid>
            <description>Enlaces interesantes #1 .NET Utilizar Swagger con .Net 5 y Angular 11, programando como fullstack ðŸ¦„ creando backend y frontend</description>
            <content type="html"><![CDATA[<h2 id="enlaces-interesantes-1">Enlaces interesantes #1</h2>
<p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>.NET</span></span></code></pre></div>
<a href="%22https://youtu.be/ei6T2wD9mCY%22">Utilizar Swagger con .Net 5 y Angular 11, programando como fullstack ðŸ¦„ creando backend y frontend</a></p>
]]></content>
        </item>
        
        <item>
            <title>Uso de RabbitMQ en .Net</title>
            <link>https://juanmarianieves.com/posts/2022/05/uso-de-rabbitmq-en-.net/</link>
            <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
            
            <guid>https://juanmarianieves.com/posts/2022/05/uso-de-rabbitmq-en-.net/</guid>
            <description>docker pull rabbitmq docker network create myrabbit docker run -d --network myrabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq rabbitmq-plugins enable rabbitmq_management private RabbitConsumer CreateConsumerForQueue(string queueName) {  RabbitConsumer RabbitConsumer = new RabbitConsumer() { QueueName = queueName };  InitChannel(RabbitConsumer, queueName);  RabbitConsumer.Consumer = new AsyncEventingBasicConsumer(RabbitConsumer.Channel);  RabbitConsumer.Consumer.Received += Consumer_Received;  RabbitConsumer.Channel.BasicConsume(queue: queueName,  autoAck: false,  consumer: RabbitConsumer.Consumer);  return RabbitConsumer; } private void InitChannel(RabbitConsumer rabbitConsumer,string queueName) {  ConnectionFactory ConnectionFactory = new ConnectionFactory() { DispatchConsumersAsync = true, HostName = _rabbitConfig.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>docker pull rabbitmq
</span></span><span style="display:flex;"><span>docker network create myrabbit
</span></span><span style="display:flex;"><span>docker run -d --network myrabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>rabbitmq-plugins enable rabbitmq_management</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> RabbitConsumer CreateConsumerForQueue(<span style="color:#66d9ef">string</span> queueName)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>      RabbitConsumer RabbitConsumer = <span style="color:#66d9ef">new</span> RabbitConsumer() { QueueName = queueName };
</span></span><span style="display:flex;"><span>      InitChannel(RabbitConsumer, queueName);
</span></span><span style="display:flex;"><span>      RabbitConsumer.Consumer = <span style="color:#66d9ef">new</span> AsyncEventingBasicConsumer(RabbitConsumer.Channel);
</span></span><span style="display:flex;"><span>      RabbitConsumer.Consumer.Received += Consumer_Received;
</span></span><span style="display:flex;"><span>      RabbitConsumer.Channel.BasicConsume(queue: queueName,
</span></span><span style="display:flex;"><span>                                          autoAck: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                                          consumer: RabbitConsumer.Consumer);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> RabbitConsumer;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> InitChannel(RabbitConsumer rabbitConsumer,<span style="color:#66d9ef">string</span> queueName)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>            ConnectionFactory ConnectionFactory = <span style="color:#66d9ef">new</span> ConnectionFactory() { DispatchConsumersAsync = <span style="color:#66d9ef">true</span>, HostName = <span style="color:#ae81ff">_</span>rabbitConfig.HostName, Port = <span style="color:#ae81ff">_</span>rabbitConfig.HostPort };
</span></span><span style="display:flex;"><span>            rabbitConsumer.Connection = ConnectionFactory.CreateConnection();
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel = rabbitConsumer.Connection.CreateModel();
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel.BasicQos(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">_</span>rabbitConfig.PrefetchCount, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">#region DECLARE DEAD_LETTER</span>
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel.ExchangeDeclare(<span style="color:#e6db74">$&#34;DeadLetterExchange_{queueName}&#34;</span>, ExchangeType.Fanout);
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel.QueueDeclare(queue: <span style="color:#e6db74">$&#34;DeadLetter_{queueName}&#34;</span>,
</span></span><span style="display:flex;"><span>                                          durable: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>                                          exclusive: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                                          autoDelete: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                                          arguments: <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel.QueueBind(<span style="color:#e6db74">$&#34;DeadLetter_{queueName}&#34;</span>, <span style="color:#e6db74">$&#34;DeadLetterExchange_{queueName}&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>);
</span></span><span style="display:flex;"><span>            Dictionary&lt;<span style="color:#66d9ef">string</span>,<span style="color:#66d9ef">object</span>&gt; Parameters = <span style="color:#66d9ef">new</span> Dictionary&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">object</span>&gt;();
</span></span><span style="display:flex;"><span>            Parameters.Add(<span style="color:#e6db74">&#34;x-dead-letter-exchange&#34;</span>, <span style="color:#e6db74">$&#34;DeadLetterExchange_{queueName}&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">#endregion DECLARE DEAD_LETTER</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            rabbitConsumer.Channel.QueueDeclare(queue: queueName,
</span></span><span style="display:flex;"><span>                                           durable: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>                                           exclusive: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                                           autoDelete: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                                           arguments: Parameters);
</span></span><span style="display:flex;"><span>         
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Task Consumer_Received(<span style="color:#66d9ef">object</span> sender, BasicDeliverEventArgs basicDeliverEventArgs)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>               RabbitConsumer RabbitConsumer = <span style="color:#ae81ff">_</span>rabbitConsumers.SingleOrDefault(rc =&gt; rc.QueueName.Equals(basicDeliverEventArgs.RoutingKey));
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">byte</span>[] BodyBytes = basicDeliverEventArgs.Body.ToArray();
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">string</span> Message = Encoding.UTF8.GetString(BodyBytes);
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">this</span>.<span style="color:#ae81ff">_l</span>ogger.LogDebug(<span style="color:#e6db74">&#34; [x] Received {0}&#34;</span>, Message);               
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">int</span> retriesCount = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">while</span> (ProcessMessage(Message, basicDeliverEventArgs.RoutingKey) &amp;&amp; retriesCount &lt; <span style="color:#ae81ff">_</span>rabbitConfig.NumOfRetries)
</span></span><span style="display:flex;"><span>               {
</span></span><span style="display:flex;"><span>                   <span style="color:#66d9ef">this</span>.<span style="color:#ae81ff">_l</span>ogger.LogError(<span style="color:#e6db74">$&#34;ProcessMessage failed with message {Message}&#34;</span>);
</span></span><span style="display:flex;"><span>                   retriesCount++;
</span></span><span style="display:flex;"><span>                   <span style="color:#ae81ff">_l</span>ogger.LogError(<span style="color:#e6db74">$&#34;Message {Message} thrown back at queue for retry. New retry count: {retriesCount}&#34;</span>);
</span></span><span style="display:flex;"><span>               }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">if</span> (retriesCount &gt;= <span style="color:#ae81ff">_</span>rabbitConfig.NumOfRetries)
</span></span><span style="display:flex;"><span>               {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">this</span>.<span style="color:#ae81ff">_l</span>ogger.LogCritical(<span style="color:#e6db74">$&#34;Rejected message {Message}&#34;</span>);                
</span></span><span style="display:flex;"><span>                    RabbitConsumer.Channel.BasicNack(basicDeliverEventArgs.DeliveryTag,<span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>               <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>               {
</span></span><span style="display:flex;"><span>                    RabbitConsumer.Channel.BasicAck(basicDeliverEventArgs.DeliveryTag, <span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>               }             
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">catch</span> (Exception ex)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#ae81ff">_l</span>ogger.LogError(ex, <span style="color:#e6db74">$&#34;Error when receive message from queue {basicDeliverEventArgs.RoutingKey}&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">finally</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>           
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> Task.CompletedTask;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
]]></content>
        </item>
        
        <item>
            <title>Hola mundo blog en Hugo</title>
            <link>https://juanmarianieves.com/posts/2022/05/hola-mundo-blog-en-hugo/</link>
            <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
            
            <guid>https://juanmarianieves.com/posts/2022/05/hola-mundo-blog-en-hugo/</guid>
            <description>Console.Write(&amp;ldquo;HOLA MUNDO&amp;rdquo;) Empezando esta andadura de tener mi pÃ¡gina personal y blog alojados en Git Hub Pages usando Hugo para montar todo el sistema. No os voy a marear con artÃ­culo de como montar hugo en github pages por que tenemos muy buenos artÃ­culos como Blog con Hugo y GitHub Pages, donde encontrareis una muy buena guia en castellano de montaros vuestro propio blog con hugo y git hub pages. Lo que si os dejo son lo cÃ³modo que es &amp;ldquo;compilar&amp;rdquo; hugo, probarlo en local y subirlo.</description>
            <content type="html"><![CDATA[<h2 id="consolewritehola-mundo">Console.Write(&ldquo;HOLA MUNDO&rdquo;)</h2>
<p>Empezando esta andadura de tener mi pÃ¡gina personal y blog alojados en Git Hub Pages usando Hugo para montar todo el sistema. No os voy a marear con artÃ­culo de como montar hugo en github pages por que tenemos
muy buenos artÃ­culos como <a href="%22https://github.com/cristinafsanz/melies-hugo%22">Blog con Hugo y GitHub Pages</a>, donde encontrareis una muy buena guia en castellano de montaros vuestro propio blog con hugo y git hub pages. Lo que si os dejo son lo cÃ³modo que es &ldquo;compilar&rdquo; hugo, probarlo en local y subirlo. A mi me recuerda a cuando lanzas una app angular. Que tiempos aquellos en los que se subian las cosas a un FTP&hellip; ahora con GIT todo son ventajas, quizas me hago viejo&hellip; pero ya sabes lo que dicen&hellip; <strong>&ldquo;MÃ¡s sabe el diablo por viejo que por pellejo&rdquo;</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>hugo</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span>hugo serve</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">git push origin master</span></span></span></code></pre></div>
]]></content>
        </item>
        
    </channel>
</rss>
